//
//  CircleViewController.swift
//  TraineeTask
//
//  Created by Ramin Akhmad on 13.07.2020.
//  Copyright (c) 2020 Ramin Akhmad. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CircleDisplayLogic: class
{
    func displayWeather(viewModel: Circle.Something.ViewModel)
}

class CircleViewController: UIViewController, CircleDisplayLogic
{
    @IBOutlet weak var cityLabel: UILabel!
    var interactor: CircleBusinessLogic?
    var router: (NSObjectProtocol & CircleRoutingLogic & CircleDataPassing)?
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CircleInteractor()
        let presenter = CirclePresenter()
        let router = CircleRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        DispatchQueue.main.async {
            CircleView.circle.center = self.view.center
            self.view.addSubview(CircleView.circle)
        }
        fetchData()
    }
    
    // MARK: Do something
    
    
    func fetchData() {
        let request = Circle.Something.Request()
        interactor?.sendRequest(request: request)
    }
    
    
    func displayWeather(viewModel: Circle.Something.ViewModel) {
        DispatchQueue.main.async {
            self.reloadInputViews()
            CircleView.circle.start(weatherResponse: viewModel)
            self.cityLabel.text = viewModel.cityName
        }
    }
    
}
