//
//  CityTableViewController.swift
//  TraineeTask
//
//  Created by Ramin Akhmad on 14.07.2020.
//  Copyright (c) 2020 Ramin Akhmad. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CityTableDisplayLogic: class {
    func displayTableCityList(viewModel: CityTable.CityList.ViewModel)
}

class CityTableViewController: UIViewController, CityTableDisplayLogic {
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var searchTableBar: UISearchBar!
    
    var interactor: CityTableBusinessLogic?
    var router: (NSObjectProtocol & CityTableRoutingLogic & CityTableDataPassing)?
    var displCities = [CityTable.CityList.ViewModel.City]()
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CityTableInteractor()
        let presenter = CityTablePresenter()
        let router = CityTableRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tableView.dataSource = self
        tableView.delegate = self
        sendRequest(option: .read, name: "")
    }
    
    // MARK: All request for interactor
    
    //    func sendInitialRequest() {
    //        let request = CityTable.CityList.Request(option: .read, name: "")
    //        interactor?.fetchData(request: request)
    //    }
    
    func sendRequest(option: Options, name: String) {
        let request = CityTable.CityList.Request(option: option, name: name)
        interactor?.fetchData(request: request)
    }
    
    func displayTableCityList(viewModel: CityTable.CityList.ViewModel) {
        displCities = viewModel.list
        tableView.reloadData()
    }
    
    
    @IBAction func addButton(_ sender: Any) {
        showAlertWithTextField()
    }
    
    
    private func showAlertWithTextField() {
        let alertController = UIAlertController(title: "Add new city", message: nil, preferredStyle: .alert)
        let confirmAction = UIAlertAction(title: "Add", style: .default) { (_) in
            if let txtField = alertController.textFields?.first, let text = txtField.text {
                //                self.displCities.append(CityTable.CityList.ViewModel.City.init(name: text))
                //                self.tableView.reloadData()
                self.sendRequest(option: .add, name: text)
            }
        }
        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel) { (_) in }
        alertController.addTextField { (textField) in
            textField.placeholder = "Tag"
        }
        alertController.addAction(confirmAction)
        alertController.addAction(cancelAction)
        self.present(alertController, animated: true, completion: nil)
    }
    
    
    
    @IBAction func deleteAllAction(_ sender: Any) {
        sendRequest(option: .delete, name: "")
    }
    
}


extension CityTableViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displCities.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "CityCell") else { return UITableViewCell() }
        cell.textLabel?.text = displCities[indexPath.row].name
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    
    
}

extension CityTableViewController: UITableViewDelegate {
    
}

extension CityTableViewController: UISearchBarDelegate {
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        interactor?.fetchFiltereData(searchName: searchText)
        tableView.reloadData()
    }
}
